# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_basic_val.ipynb.

# %% auto 0
__all__ = ['transform', 'train_set', 'test_set', 'train_set_size', 'valid_set_size', 'seed', 'valid_set', 'train_loader',
           'valid_loader', 'test_loader', 'Encoder', 'Decoder', 'LitAutoEncoder']

# %% ../nbs/00_basic_val.ipynb 3
import os
import torch
from torch import nn
import torch.nn.functional as F
from torchvision import transforms, datasets
from torchvision.datasets import MNIST
from torch.utils.data import DataLoader, random_split
import pytorch_lightning as pl

# %% ../nbs/00_basic_val.ipynb 4
# Load data sets
transform = transforms.ToTensor()
train_set = datasets.MNIST(root="../data", download=True, train=True, transform=transform)
test_set = datasets.MNIST(root="../data", download=True, train=False, transform=transform)

# %% ../nbs/00_basic_val.ipynb 7
# use 20% of training data for validation
train_set_size = int(len(train_set) * 0.8)
valid_set_size = len(train_set) - train_set_size
train_set_size, valid_set_size

# %% ../nbs/00_basic_val.ipynb 9
seed = torch.Generator().manual_seed(42)
train_set, valid_set = random_split(train_set, [train_set_size, valid_set_size], generator=seed)

# %% ../nbs/00_basic_val.ipynb 10
train_loader = DataLoader(train_set, batch_size=10)

# %% ../nbs/00_basic_val.ipynb 11
valid_loader = DataLoader(valid_set, batch_size=10)

# %% ../nbs/00_basic_val.ipynb 12
test_loader = DataLoader(test_set, batch_size=10)

# %% ../nbs/00_basic_val.ipynb 13
class Encoder(nn.Module):
    def __init__(self):
        super().__init__()
        self.l1 = nn.Sequential(nn.Flatten(), nn.Linear(28*28, 64), nn.ReLU(), nn.Linear(64, 3))
        
    def forward(self, x):
        return self.l1(x)

# %% ../nbs/00_basic_val.ipynb 14
class Decoder(nn.Module):
    def __init__(self):
        super().__init__()
        self.l1 = nn.Sequential(nn.Linear(3, 64), nn.ReLU(), nn.Linear(64, 28*28))
        
    def forward(self, x):
        return self.l1(x)

# %% ../nbs/00_basic_val.ipynb 15
class LitAutoEncoder(pl.LightningModule):
    def __init__(self, encoder, decoder):
        super().__init__()
        self.encoder = encoder
        self.decoder = decoder
        self.save_hyperparameters()        

    def training_step(self, batch, batch_idx):
        # training_step defines the train loop.
        x, y = batch 
        out_shape = x.shape
        z = self.encoder(x)
        x_hat = self.decoder(z)
        loss = F.mse_loss(x_hat.view(out_shape), x)
        return loss
    
    def test_step(self, batch, batch_idx):
        # this is the test loop
        x, y = batch 
        out_shape = x.shape
        z = self.encoder(x)
        x_hat = self.decoder(z)
        loss = F.mse_loss(x_hat.view(out_shape), x)
        self.log("test_loss", loss)
    
    def validation_step(self, batch, batch_idx):
        # this is the validation loop
        x, y = batch 
        out_shape = x.shape
        z = self.encoder(x)
        x_hat = self.decoder(z)
        loss = F.mse_loss(x_hat.view(out_shape), x)
        self.log("val_loss", loss)

    def configure_optimizers(self):
        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)
        return optimizer
